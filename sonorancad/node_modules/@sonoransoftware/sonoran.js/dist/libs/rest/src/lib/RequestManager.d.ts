/// <reference types="node" />
import { Collection } from '@discordjs/collection';
import { EventEmitter } from 'events';
import type { Instance } from '../../../../instance/Instance';
import { RESTOptions, RateLimitData, RestEvents } from './REST';
import { productEnums } from '../../../../constants';
import { IHandler } from './handlers/IHandler';
export type RouteLike = `/${string}`;
export declare const enum RequestMethod {
    Delete = "delete",
    Get = "get",
    Patch = "patch",
    Post = "post",
    Put = "put"
}
export type ReqDataType = Array<unknown> | unknown;
export interface RequestData {
    id: string;
    key: string;
    type: string;
    data: any;
}
export interface InternalRequestData extends RequestData {
    product: productEnums;
}
export interface RequestHeaders {
    'User-Agent': string;
}
export interface APIData {
    requestTypeId: string;
    typePath: string;
    fullUrl: string;
    method: string;
    fetchOptions: RequestInit;
    data: RequestData;
    product: productEnums;
    type: string;
}
export interface RequestManager {
    on: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    once: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    emit: (<K extends keyof RestEvents>(event: K, ...args: RestEvents[K]) => boolean) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, ...args: any[]) => boolean);
    off: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    removeAllListeners: (<K extends keyof RestEvents>(event?: K) => this) & (<S extends string | symbol>(event?: Exclude<S, keyof RestEvents>) => this);
}
export declare class RequestManager extends EventEmitter {
    readonly ratelimitedTypes: Collection<string, RateLimitData>;
    readonly handlers: Collection<string, IHandler>;
    readonly product: productEnums;
    readonly options: RESTOptions;
    private instance;
    constructor(_instance: Instance, _product: productEnums, options: RESTOptions);
    queueRequest(request: InternalRequestData): Promise<unknown>;
    onRateLimit(id: string, rateLimitData: RateLimitData): void;
    removeRateLimit(id: string): void;
    private createHandler;
    private static resolveRequestData;
    debug(log: string): void;
}
