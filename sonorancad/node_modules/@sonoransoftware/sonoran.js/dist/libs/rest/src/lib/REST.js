"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.REST = void 0;
const events_1 = require("events");
const RequestManager_1 = require("./RequestManager");
const constants_1 = require("./utils/constants");
const constants_2 = require("../../../../constants");
class REST extends events_1.EventEmitter {
    constructor(_instance, _manager, _product, options) {
        super();
        this.instance = _instance;
        this.manager = _manager;
        this.requestManager = new RequestManager_1.RequestManager(_instance, _product, options)
            .on("restDebug" /* RESTEvents.Debug */, this.emit.bind(this, "restDebug" /* RESTEvents.Debug */))
            .on("rateLimited" /* RESTEvents.RateLimited */, this.emit.bind(this, "rateLimited" /* RESTEvents.RateLimited */))
            .on("invalidRequestWarning" /* RESTEvents.InvalidRequestWarning */, this.emit.bind(this, "invalidRequestWarning" /* RESTEvents.InvalidRequestWarning */));
        this.on('newListener', (name, listener) => {
            if (name === "request" /* RESTEvents.Request */ || name === "response" /* RESTEvents.Response */)
                this.requestManager.on(name, listener);
        });
        this.on('removeListener', (name, listener) => {
            if (name === "request" /* RESTEvents.Request */ || name === "response" /* RESTEvents.Response */)
                this.requestManager.off(name, listener);
        });
    }
    /**
     * Runs a request from the api
     * @param type API Type Enum
     */
    request(type, ...args) {
        const apiType = constants_1.AllAPITypes.find((aT) => aT.type === type);
        if (!apiType)
            throw new Error('Invalid API Type given for request.');
        let communityId;
        let apiKey;
        switch (apiType.product) {
            case constants_2.productEnums.CAD: {
                communityId = this.instance.cadCommunityId;
                apiKey = this.instance.cadApiKey;
                break;
            }
            case constants_2.productEnums.CMS: {
                communityId = this.instance.cmsCommunityId;
                apiKey = this.instance.cmsApiKey;
                break;
            }
        }
        if (!communityId || !apiKey)
            throw new Error(`Community ID or API Key could not be found for request. P${apiType.product}`);
        // if (apiType.minVersion > this.manager.version) throw new Error(`[${type}] Subscription version too low for this API type request. Current Version: ${convertSubNumToName(this.manager.version)} Needed Version: ${convertSubNumToName(apiType.minVersion)}`);  // Verifies API Subscription Level Requirement which is deprecated currently
        const formattedData = this.formatDataArguments(apiType.type, args);
        const options = {
            id: communityId,
            key: apiKey,
            type,
            data: formattedData,
            product: apiType.product
        };
        return this.requestManager.queueRequest(options);
    }
    formatDataArguments(type, args) {
        switch (type) {
            case 'VERIFY_WHITELIST': {
                return {
                    apiId: args[0],
                    accId: constants_2.uuidRegex.test(args[1]) ? args[1] : undefined,
                    serverId: args[2],
                    discord: args[3]
                };
            }
            case 'FULL_WHITELIST': {
                return {
                    serverId: args[0]
                };
            }
            case 'RSVP': {
                return {
                    eventId: args[0],
                    apiId: args[1],
                    accId: args[2],
                    discord: args[3],
                    uniqueId: args[4]
                };
            }
            case 'GET_COM_ACCOUNT': {
                return {
                    apiId: args[0],
                    username: args[1],
                    accId: args[2],
                    discord: args[3],
                    uniqueId: args[4]
                };
            }
            case 'GET_ACCOUNT_RANKS': {
                return {
                    apiId: args[0],
                    username: args[1],
                    accId: args[2],
                    discord: args[3],
                    uniqueId: args[4]
                };
            }
            case 'CLOCK_IN_OUT': {
                return {
                    apiId: args[0],
                    accId: args[1],
                    forceClockIn: args[2],
                    discord: args[3],
                    uniqueId: args[4]
                };
            }
            case 'CHECK_COM_APIID': {
                return {
                    apiId: args[0]
                };
            }
            case 'SET_ACCOUNT_RANKS': {
                return {
                    accId: args[0],
                    set: args[1],
                    add: args[2],
                    remove: args[3],
                    apiId: args[4],
                    username: args[5],
                    discord: args[6],
                    uniqueId: args[7],
                };
            }
            case 'VERIFY_SECRET': {
                return {
                    secret: args[0],
                };
            }
            case 'CHANGE_FORM_STAGE': {
                return {
                    accId: args[0],
                    formId: args[1],
                    newStageId: args[2],
                    apiId: args[3],
                    username: args[4],
                    discord: args[5],
                    uniqueId: args[6],
                };
            }
            case 'BAN_ACCOUNT': {
                return {
                    apiId: args[0],
                    accId: args[1],
                    discord: args[2],
                    uniqueId: args[3]
                };
            }
            case 'KICK_ACCOUNT': {
                return {
                    apiId: args[0],
                    accId: args[1],
                    discord: args[2],
                    uniqueId: args[3]
                };
            }
            case 'LOOKUP': {
                return {
                    id: args[0],
                    uuid: args[1]
                };
            }
            case 'EDIT_ACC_PROFLIE_FIELDS': {
                return {
                    apiId: args[0],
                    username: args[1],
                    accId: args[2],
                    discord: args[3],
                    uniqueId: args[4],
                    profileFields: args[5]
                };
            }
            default: {
                return args;
            }
        }
    }
}
exports.REST = REST;
