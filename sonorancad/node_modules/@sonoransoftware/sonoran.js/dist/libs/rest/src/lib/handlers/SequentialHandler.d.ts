import { RequestInit } from 'node-fetch';
import type { RequestManager, APIData } from '../RequestManager';
import type { IHandler } from './IHandler';
export declare class SequentialHandler implements IHandler {
    #private;
    private readonly manager;
    private readonly data;
    /**
     * The unique id of the handler
     */
    readonly id: string;
    /**
     * @param manager The request manager
     * @param hash The hash that this RequestHandler handles
     * @param majorParameter The major parameter for this handler
     */
    constructor(manager: RequestManager, data: APIData);
    /**
     * If the bucket is currently inactive (no pending requests)
     */
    get inactive(): boolean;
    getMang(): RequestManager;
    /**
     * Emits a debug message
     * @param message The message to debug
     */
    /**
     * Queues a request to be sent
     * @param routeId The generalized api route with literal ids for major parameters
     * @param url The url to do the request on
     * @param options All the information needed to make a request
     * @param requestData Extra data from the user's request needed for errors and additional processing
     */
    queueRequest(url: string, options: RequestInit, data: APIData): Promise<unknown>;
    /**
     * The method that actually makes the request to the api, and updates info about the bucket accordingly
     * @param routeId The generalized api route with literal ids for major parameters
     * @param url The fully resolved url to make the request to
     * @param options The node-fetch options needed to make the request
     * @param requestData Extra data from the user's request needed for errors and additional processing
     * @param retries The number of retries this request has already attempted (recursion)
     */
    private runRequest;
    private static parseResponse;
}
