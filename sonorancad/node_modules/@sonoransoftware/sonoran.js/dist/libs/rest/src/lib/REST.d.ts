/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import { RequestData, RequestManager } from './RequestManager';
import { AllAPITypesType, RESTTypedAPIDataStructs } from './utils/constants';
import { productEnums } from '../../../../constants';
import type { AgentOptions } from 'node:https';
import type { RequestInit, Response } from 'node-fetch';
import { Instance } from '../../../../instance/Instance';
import { CADManager } from '../../../../managers/CADManager';
import { CMSManager } from '../../../../managers/CMSManager';
/**
 * Options to be passed when creating the REST instance
 */
export interface RESTOptions {
    /**
     * HTTPS Agent options
     * @default {}
     */
    agent: Omit<AgentOptions, 'keepAlive'>;
    /**
     * The base api path, without version
     */
    api: string;
    /**
     * Additional headers to send for all API requests
     * @default {}
     */
    headers: Record<string, string>;
    /**
     * Wether the request should be queued if there's a current ratelimit or to reject.
     * @default true
     */
    rejectOnRateLimit: boolean;
}
/**
 * Data emitted on `RESTEvents.RateLimited`
 */
export interface RateLimitData {
    product: productEnums;
    type: string;
    timeTill: NodeJS.Timer;
}
export interface APIRequest {
    /**
     * The HTTP method used in this request
     */
    type: AllAPITypesType;
    /**
     * Additional HTTP options for this request
     */
    options: RequestInit;
    /**
     * The data that was used to form the body of this request
     */
    data: RequestData;
}
export interface InvalidRequestWarningData {
    /**
     * Number of invalid requests that have been made in the window
     */
    count: number;
    /**
     * API request type which the request is for
     */
    type: string;
    /**
     * Product which the invalid request is for
     */
    product: productEnums;
}
export interface RestEvents {
    invalidRequestWarning: [invalidRequestInfo: InvalidRequestWarningData];
    restDebug: [info: string];
    rateLimited: [rateLimitInfo: RateLimitData];
    request: [request: APIRequest];
    response: [request: APIRequest, response: Response];
    newListener: [name: string, listener: (...args: any) => void];
    removeListener: [name: string, listener: (...args: any) => void];
}
export interface REST {
    on: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    once: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    emit: (<K extends keyof RestEvents>(event: K, ...args: RestEvents[K]) => boolean) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, ...args: any[]) => boolean);
    off: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    removeAllListeners: (<K extends keyof RestEvents>(event?: K) => this) & (<S extends string | symbol>(event?: Exclude<S, keyof RestEvents>) => this);
}
export type RestManagerTypes = CADManager | CMSManager;
export declare class REST extends EventEmitter {
    readonly requestManager: RequestManager;
    readonly instance: Instance;
    readonly manager: RestManagerTypes;
    constructor(_instance: Instance, _manager: RestManagerTypes, _product: productEnums, options: RESTOptions);
    /**
     * Runs a request from the api
     * @param type API Type Enum
     */
    request<K extends keyof RESTTypedAPIDataStructs>(type: K, ...args: RESTTypedAPIDataStructs[K]): Promise<unknown>;
    private formatDataArguments;
}
