import { productEnums } from '../../../../../constants';
import type { RESTOptions } from '../REST';
export declare const DefaultUserAgent = "Sonoran.js NPM Module";
export declare const DefaultCADRestOptions: Required<RESTOptions>;
export declare const DefaultCMSRestOptions: Required<RESTOptions>;
/**
 * The events that the REST manager emits
 */
export declare const enum RESTEvents {
    Debug = "restDebug",
    InvalidRequestWarning = "invalidRequestWarning",
    RateLimited = "rateLimited",
    Request = "request",
    Response = "response"
}
export interface APITypeData {
    type: string;
    path: string;
    method: 'POST' | 'GET' | 'DELETE' | 'PATCH';
    minVersion: number;
}
export interface AllAPITypeData {
    product: productEnums;
    type: string;
    path: string;
    method: 'POST' | 'GET' | 'DELETE' | 'PATCH';
    minVersion: number;
}
export declare const GeneralCADAPITypes: APITypeData[];
export declare const CivilianCADAPITypes: APITypeData[];
export declare const EmergencyCADAPITypes: APITypeData[];
export declare const GeneralCMSAPITypes: APITypeData[];
export declare const ServersCMSAPITypes: APITypeData[];
export declare const EventsCMSAPITypes: APITypeData[];
export declare const FormsCMSAPITypes: APITypeData[];
export declare const CommunitiesCMSAPITypes: APITypeData[];
export declare const AllAPITypes: AllAPITypeData[];
export type AllAPITypesType = 'GET_SERVERS' | 'SET_SERVERS' | 'GET_VERSION' | 'SET_PENAL_CODES' | 'SET_API_ID' | 'GET_TEMPLATES' | 'NEW_RECORD' | 'EDIT_RECORD' | 'REMOVE_RECORD' | 'LOOKUP_INT' | 'LOOKUP' | 'GET_ACCOUNT' | 'CHECK_APIID' | 'APPLY_PERMISSION_KEY' | 'SET_ACCOUNT_PERMISSIONS' | 'BAN_USER' | 'VERIFY_SECRET' | 'AUTH_STREETSIGNS' | 'SET_POSTALS' | 'SEND_PHOTO' | 'GET_CHARACTERS' | 'NEW_CHARACTER' | 'EDIT_CHARACTER' | 'REMOVE_CHARACTER' | 'GET_IDENTIFIERS' | 'MODIFY_IDENTIFIER' | 'SET_IDENTIFIER' | 'UNIT_PANIC' | 'UNIT_STATUS' | 'GET_BLIPS' | 'ADD_BLIP' | 'MODIFY_BLIP' | 'REMOVE_BLIP' | '911_CALL' | 'REMOVE_911' | 'GET_CALLS' | 'GET_ACTIVE_UNITS' | 'KICK_UNIT' | 'NEW_DISPATCH' | 'ATTACH_UNIT' | 'DETACH_UNIT' | 'SET_CALL_POSTAL' | 'SET_CALL_PRIMARY' | 'ADD_CALL_NOTE' | 'CLOSE_CALL' | 'UNIT_LOCATION' | 'SET_STREETSIGN_CONFIG' | 'UPDATE_STREETSIGN' | 'GET_COM_ACCOUNT' | 'GET_DEPARTMENTS' | 'GET_SUB_VERSION' | 'CHECK_COM_APIID' | 'VERIFY_WHITELIST' | 'CLOCK_IN_OUT' | 'FULL_WHITELIST' | 'GET_ACCOUNT_RANKS' | 'SET_ACCOUNT_RANKS' | 'RSVP' | 'CHANGE_FORM_STAGE' | 'KICK_ACCOUNT' | 'BAN_ACCOUNT' | 'LOOKUP' | 'EDIT_ACC_PROFLIE_FIELDS';
export interface CMSServerAPIStruct {
    id: number;
    name: string;
    description: string;
}
export interface CADServerAPIStruct {
    id: number;
    name: string;
    description: string;
    signal: string;
    mapUrl: string;
    mapIp: string;
    listenerPort: number;
    differingOutbound: boolean;
    outboundIp: string;
    enableMap: boolean;
    isStatic: boolean;
    mapType: string;
}
export interface CADPenalCodeStruct {
    code: string;
    type: string;
    title: string;
    bondType: string;
    jailTime: string;
    bondAmount: number;
}
export interface CADSetAPIIDStruct {
    username: string;
    sessionId?: string;
    apiIds: string[];
    pushNew: boolean;
}
export declare enum CADRecordTypeEnums {
    Warrant = 2,
    Bolo = 3,
    License = 4,
    VehicleRegistration = 5,
    Character = 7,
    PoliceRecord = 8,
    PoliceReport = 9,
    MedicalRecord = 10,
    MedicalReport = 11,
    FireRecord = 12,
    FireReport = 13,
    DMVRecord = 14,
    LawRecord = 15,
    LawReport = 16
}
export declare enum CADRecordSectionCategoryEnums {
    Custom = 0,
    Flags = 1,
    Speed = 5,
    Charges = 6,
    LinkedRecords = 9
}
export interface CADRecordDependencyStruct {
    type: string;
    fid: string;
    acceptableValues: string[];
}
export interface CADRecordSectionFieldStruct {
    type: 'INPUT' | 'TEXTAREA' | 'ADDRESS' | 'SELECT' | 'STATUS' | 'DATE' | 'TIME' | 'IMAGE' | 'CHECKBOXES' | 'LABEL' | 'UNIT_NUMBER' | 'UNIT_NAME' | 'UNIT_RANK' | 'UNIT_AGENCY' | 'UNIT_DEPARTMENT' | 'UNIT_SUBDIVISION' | 'UNIT_AGENCY_LOCATION' | 'UNIT_AGENCY_ZIP' | 'UNIT_LOCATION';
    value: string;
    size: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    data: Record<string | number | symbol, unknown>;
    options: string[];
    isPreviewed: boolean;
    isSupervisor: boolean;
    isRequired: boolean;
    unique: boolean;
    readOnly: boolean;
    mask: string;
    maskReverse: boolean;
    dbMap: boolean;
    isFromSync: boolean;
    uid: string;
    dependency: CADRecordDependencyStruct;
}
export interface CADRecordSectionStruct {
    category: CADRecordSectionCategoryEnums;
    label: string;
    fields: CADRecordSectionFieldStruct[];
    searchCiv: boolean;
    searchVeh: boolean;
    enableDuplicate: boolean;
    dependency: CADRecordDependencyStruct;
}
export interface CADRecordStruct {
    recordTypeId: number;
    id: number;
    syncId: string;
    name: string;
    type: CADRecordTypeEnums;
    sections: CADRecordSectionStruct[];
}
export interface CADNewEditRecordOptionOneStruct {
    user: string;
    useDictionary: boolean;
    recordTypeId: number;
    replaceValues: Record<string, string>;
}
export interface CADNewEditRecordOptionTwoStruct {
    user: string;
    record: CADRecordStruct;
}
export declare enum CADLookupByIntSearchTypeEnums {
    IDENTIFIER = 0,
    SUPERVISOR_STATUS = 1,
    ACTIVE_STATUS = 2,
    NUMBER = 3
}
export interface CADLookupByIntStruct {
    apiId?: string;
    searchType: CADLookupByIntSearchTypeEnums;
    value: number;
    types: number[];
    limit?: number;
    offset?: number;
}
export interface CADLookupStruct {
    apiId?: string;
    types: number[];
    first: string;
    last: string;
    mi: string;
    plate: string;
    partial: boolean;
    agency?: string;
    department?: string;
    subdivision?: string;
}
export interface CADModifyAccountPermsStruct {
    apiId?: string;
    username?: string;
    active?: boolean;
    add: string[];
    remove: string[];
}
export interface CADKickBanUserStruct {
    apiId: string;
    isBan?: boolean;
    isKick?: boolean;
}
export interface CADSetPostalStruct {
    code: string;
    x: number;
    y: number;
}
export declare enum CADModifyIdentifierActionEnums {
    ADD = 0,
    EDIT = 1,
    REMOVE = 2
}
export interface CADModifyIdentifierStruct {
    apiId: string;
    action: CADModifyIdentifierActionEnums;
    identifier?: Record<string, string>;
    identId?: number;
}
export interface CADBlipStruct {
    id: number;
    coordinates: {
        x: number;
        y: number;
    };
    icon: string;
    color: string;
    tooltip: string;
}
export interface CADAddBlipStruct {
    serverId: number;
    blip: CADBlipStruct;
}
export interface CADModifyBlipStruct {
    id: number;
    coordinates?: {
        x: number;
        y: number;
    };
    icon?: string;
    color?: string;
    tooltip?: string;
}
export interface CADGetCallsStruct {
    serverId?: number;
    closedLimit?: number;
    closedOffset?: number;
}
export interface CADGetActiveUnitsStruct {
    serverId?: number;
    onlyUnits?: boolean;
    includeOffline?: boolean;
    limit?: number;
    offset?: number;
}
export declare enum CADDispatchOriginEnums {
    Caller = 0,
    RadioDispatch = 1,
    Observed = 2,
    WalkUp = 3
}
export declare enum CADDispatchStatusEnums {
    Pending = 0,
    Active = 1,
    Closed = 2
}
export interface CADNewDispatchStruct {
    serverId: number;
    origin: CADDispatchOriginEnums;
    status: CADDispatchStatusEnums;
    priority: 1 | 2 | 3;
    block: string;
    address: string;
    postal: string;
    title: string;
    code: string;
    primary: number;
    trackPrimary: boolean;
    description: string;
    metaData: Record<string, string>;
    units: string[];
}
export interface CADStreetSignStruct {
    id: number;
    label: string;
    text1: string;
    text2: string;
    text3: string;
}
export interface CADUnitLocationStruct {
    apiId: string;
    location: string;
}
export interface CMSProfileField {
    id: string;
    value: string;
}
export interface RESTTypedAPIDataStructs {
    GET_SERVERS: [];
    SET_SERVERS: [
        servers: CADServerAPIStruct[],
        deployMap: boolean
    ];
    GET_VERSION: [];
    SET_PENAL_CODES: [data: CADPenalCodeStruct[]];
    SET_API_ID: [data: CADSetAPIIDStruct];
    GET_TEMPLATES: [recordTypeId?: number];
    NEW_RECORD: [data: CADNewEditRecordOptionOneStruct | CADNewEditRecordOptionTwoStruct];
    EDIT_RECORD: [data: CADNewEditRecordOptionOneStruct | CADNewEditRecordOptionTwoStruct];
    REMOVE_RECORD: [id: number];
    LOOKUP_INT: [data: CADLookupByIntStruct];
    LOOKUP: [data: CADLookupStruct];
    GET_ACCOUNT: [
        apiId?: string,
        username?: string
    ];
    CHECK_APIID: [apiId: string];
    APPLY_PERMISSION_KEY: [
        apiId: string,
        permissionKey: string
    ];
    SET_ACCOUNT_PERMISSIONS: [data: CADModifyAccountPermsStruct];
    BAN_USER: [data: CADKickBanUserStruct];
    VERIFY_SECRET: [secret: string];
    AUTH_STREETSIGNS: [serverId: number];
    SET_POSTALS: [data: CADSetPostalStruct[]];
    SEND_PHOTO: [
        apiId: string,
        url: string
    ];
    GET_CHARACTERS: [apiId: string];
    NEW_CHARACTER: [data: CADNewEditRecordOptionOneStruct | CADNewEditRecordOptionTwoStruct];
    EDIT_CHARACTER: [data: CADNewEditRecordOptionOneStruct | CADNewEditRecordOptionTwoStruct];
    REMOVE_CHARACTER: [id: number];
    GET_IDENTIFIERS: [apiId: string];
    MODIFY_IDENTIFIER: [data: CADModifyIdentifierStruct];
    SET_IDENTIFIER: [
        apiId: string,
        identId: number
    ];
    UNIT_PANIC: [
        apiId: string,
        isPanic: boolean
    ];
    UNIT_STATUS: [
        apiId: string,
        status: number,
        serverId: number
    ];
    GET_BLIPS: [serverId: number];
    ADD_BLIP: [data: CADAddBlipStruct[]];
    MODIFY_BLIP: [data: CADModifyBlipStruct[]];
    REMOVE_BLIP: [id: number];
    REMOVE_911: [callId: number];
    GET_CALLS: [data: CADGetCallsStruct];
    GET_ACTIVE_UNITS: [data: CADGetActiveUnitsStruct];
    KICK_UNIT: [
        apiId: string,
        reason: string,
        serverId: number
    ];
    NEW_DISPATCH: [data: CADNewDispatchStruct];
    ATTACH_UNIT: [
        serverId: number,
        callId: number,
        units: string[]
    ];
    DETACH_UNIT: [
        serverId: number,
        units: string[]
    ];
    SET_CALL_POSTAL: [
        serverId: number,
        callId: number,
        postal: string
    ];
    SET_CALL_PRIMARY: [
        serverId: number,
        callId: number,
        primary: number,
        trackPrimary: boolean
    ];
    ADD_CALL_NOTE: [
        serverId: number,
        callId: number,
        note: string
    ];
    CLOSE_CALL: [
        serverId: number,
        callId: number
    ];
    'CALL_911': [
        serverId: number,
        isEmergency: boolean,
        caller: string,
        location: string,
        description: string,
        metaData: Record<string, string>
    ];
    SET_STREETSIGN_CONFIG: [
        serverId: number,
        signConfig: CADStreetSignStruct[]
    ];
    UPDATE_STREETSIGN: [
        serverId: number,
        signData: {
            ids: number[];
            text1: string;
            text2: string;
            text3: string;
        }
    ];
    UNIT_LOCATION: [data: CADUnitLocationStruct[]];
    GET_COM_ACCOUNT: [
        apiId?: string,
        username?: string,
        accId?: string,
        discord?: string,
        uniqueId?: string
    ];
    GET_SUB_VERSION: [];
    CHECK_COM_APIID: [apiId: string];
    CLOCK_IN_OUT: [
        apiId?: string,
        accId?: string,
        forceClockIn?: boolean,
        discord?: string,
        uniqueId?: string
    ];
    GET_DEPARTMENTS: [];
    GET_ACCOUNT_RANKS: [
        apiId?: string,
        username?: string,
        accId?: string,
        discord?: string,
        uniqueId?: string
    ];
    SET_ACCOUNT_RANKS: [
        accId?: string,
        set?: string[],
        add?: string[],
        remove?: string[],
        apiId?: string,
        username?: string,
        discord?: string,
        uniqueId?: string
    ];
    GET_GAME_SERVERS: [];
    VERIFY_WHITELIST: [
        apiId: string | undefined,
        accId: string | undefined,
        serverId: number,
        username: string | undefined,
        discord: string | undefined,
        uniqueId: number | undefined
    ];
    FULL_WHITELIST: [
        serverId?: number
    ];
    RSVP: [
        eventId: string,
        apiId: string | undefined,
        accId: string | undefined,
        discord: string | undefined,
        uniqueId: string | undefined
    ];
    EDIT_ACC_PROFLIE_FIELDS: [
        apiId: string,
        username: string,
        accId: string,
        discord: string,
        uniqueId: string,
        profileFields: CMSProfileField[]
    ];
    CHANGE_FORM_STAGE: [
        accId: string,
        formId: number,
        newStageId: string,
        apiId: string,
        username: string,
        discord: string,
        uniqueId: number
    ];
}
export type PossibleRequestData = undefined | {
    data: CADPenalCodeStruct[] | CADSetAPIIDStruct | CADNewEditRecordOptionOneStruct | CADNewEditRecordOptionTwoStruct | CADLookupByIntStruct | CADLookupStruct | CADModifyAccountPermsStruct | CADKickBanUserStruct | CADSetPostalStruct[] | CADModifyIdentifierStruct | CADAddBlipStruct[] | CADModifyBlipStruct[] | CADGetCallsStruct | CADGetActiveUnitsStruct | CADNewDispatchStruct;
} | {
    servers: CADServerAPIStruct[];
    deployMap: boolean;
} | {
    id: number;
} | {
    recordTypeId?: number;
} | {
    apiId?: string;
    username?: string;
} | {
    apiId: string;
} | {
    apiId: string;
    permissionKey: string;
} | {
    secret: string;
} | {
    serverId: number;
} | {
    serverId?: number;
} | {
    apiId: string;
    url: string;
} | {
    apiId: string;
    identId: number;
} | {
    apiId: string;
    isPanic: boolean;
} | {
    apiId: string;
    status: number;
    serverId: number;
} | {
    callId: number;
} | {
    serverId: number;
    callId: number;
    units: string[];
} | {
    serverId: number;
    units: string[];
} | {
    serverId: number;
    callId: number;
    postal: string;
} | {
    serverId: number;
    callId: number;
    primary: number;
    trackPrimary: boolean;
} | {
    serverId: number;
    callId: number;
    note: string;
} | {
    serverId: number;
    callId: number;
} | {
    serverId: number;
    isEmergency: boolean;
    caller: string;
    location: string;
    description: string;
    metaData: Record<string, string>;
} | {
    serverId: number;
    signConfig: CADStreetSignStruct[];
} | {
    serverId: number;
    signData: {
        ids: number[];
        text1: string;
        text2: string;
        text3: string;
    };
} | {
    apiId?: string;
    username?: string;
} | {
    apiId: string;
    serverId: number;
} | {
    apiId: string;
    forceClockIn: boolean;
} | {
    accountId: string;
    set?: {
        primary: string[];
        secondary: string[];
    };
    add?: string[];
    remove?: string[];
};
