"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CADDispatchStatusEnums = exports.CADDispatchOriginEnums = exports.CADModifyIdentifierActionEnums = exports.CADLookupByIntSearchTypeEnums = exports.CADRecordSectionCategoryEnums = exports.CADRecordTypeEnums = exports.AllAPITypes = exports.CommunitiesCMSAPITypes = exports.FormsCMSAPITypes = exports.EventsCMSAPITypes = exports.ServersCMSAPITypes = exports.GeneralCMSAPITypes = exports.EmergencyCADAPITypes = exports.CivilianCADAPITypes = exports.GeneralCADAPITypes = exports.DefaultCMSRestOptions = exports.DefaultCADRestOptions = exports.DefaultUserAgent = void 0;
const constants_1 = require("../../../../../constants");
exports.DefaultUserAgent = 'Sonoran.js NPM Module';
exports.DefaultCADRestOptions = {
    agent: {},
    api: 'https://api.sonorancad.com',
    headers: {},
    rejectOnRateLimit: true
};
exports.DefaultCMSRestOptions = {
    agent: {},
    api: 'https://api.sonorancms.com',
    headers: {},
    rejectOnRateLimit: true
};
exports.GeneralCADAPITypes = [
    {
        type: 'GET_SERVERS',
        path: 'general/get_servers',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'SET_SERVERS',
        path: 'general/set_servers',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'GET_VERSION',
        path: 'general/get_version',
        method: 'POST',
        minVersion: 0
    },
    {
        type: 'SET_PENAL_CODES',
        path: 'general/set_penal_codes',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'SET_API_ID',
        path: 'general/set_api_id',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'GET_TEMPLATES',
        path: 'general/get_templates',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'NEW_RECORD',
        path: 'general/new_record',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'EDIT_RECORD',
        path: 'general/edit_record',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'REMOVE_RECORD',
        path: 'general/remove_record',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'LOOKUP_INT',
        path: 'general/lookup_int',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'LOOKUP',
        path: 'general/lookup',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'GET_ACCOUNT',
        path: 'general/get_account',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'CHECK_APIID',
        path: 'general/check_apiid',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'APPLY_PERMISSION_KEY',
        path: 'general/apply_permission_key',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'SET_ACCOUNT_PERMISSIONS',
        path: 'general/set_account_permissions',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'BAN_USER',
        path: 'general/ban_user',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'VERIFY_SECRET',
        path: 'general/verify_secret',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'AUTH_STREETSIGNS',
        path: 'general/auth_streetsigns',
        method: 'POST',
        minVersion: 4
    },
    {
        type: 'SET_POSTALS',
        path: 'general/set_postals',
        method: 'POST',
        minVersion: 4
    },
    {
        type: 'SEND_PHOTO',
        path: 'general/send_photo',
        method: 'POST',
        minVersion: 4
    }
];
exports.CivilianCADAPITypes = [
    {
        type: 'GET_CHARACTERS',
        path: 'civilian/get_characters',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'NEW_CHARACTER',
        path: 'civilian/new_character',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'EDIT_CHARACTER',
        path: 'civilian/edit_characters',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'REMOVE_CHARACTER',
        path: 'civilian/remove_character',
        method: 'POST',
        minVersion: 2
    }
];
exports.EmergencyCADAPITypes = [
    {
        type: 'GET_IDENTIFIERS',
        path: 'emergency/get_identifiers',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'MODIFY_IDENTIFIER',
        path: 'emergency/modify_identifier',
        method: 'POST',
        minVersion: 4
    },
    {
        type: 'SET_IDENTIFIER',
        path: 'emergency/set_identifier',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'UNIT_PANIC',
        path: 'emergency/unit_panic',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'UNIT_STATUS',
        path: 'emergency/unit_status',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'GET_BLIPS',
        path: 'emergency/get_blips',
        method: 'POST',
        minVersion: 4
    },
    {
        type: 'ADD_BLIP',
        path: 'emergency/add_blip',
        method: 'POST',
        minVersion: 4
    },
    {
        type: 'MODIFY_BLIP',
        path: 'emergency/modify_blip',
        method: 'POST',
        minVersion: 4
    },
    {
        type: 'REMOVE_BLIP',
        path: 'emergency/remove_blip',
        method: 'POST',
        minVersion: 4
    },
    {
        type: '911_CALL',
        path: 'emergency/911_call',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'REMOVE_911',
        path: 'emergency/remove_911',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'GET_CALLS',
        path: 'emergency/get_calls',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'GET_ACTIVE_UNITS',
        path: 'emergency/get_active_units',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'KICK_UNIT',
        path: 'emergency/kick_unit',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'NEW_DISPATCH',
        path: 'emergency/new_dispatch',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'ATTACH_UNIT',
        path: 'emergency/attach_unit',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'DETACH_UNIT',
        path: 'emergency/detach_unit',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'SET_CALL_POSTAL',
        path: 'emergency/set_call_postal',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'SET_CALL_PRIMARY',
        path: 'emergency/set_call_primary',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'ADD_CALL_NOTE',
        path: 'emergency/add_call_note',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'CLOSE_CALL',
        path: 'emergency/close_call',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'UNIT_LOCATION',
        path: 'emergency/unit_location',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'SET_STREETSIGN_CONFIG',
        path: 'emergency/set_streetsign_config',
        method: 'POST',
        minVersion: 4
    },
    {
        type: 'UPDATE_STREETSIGN',
        path: 'emergency/update_streetsign',
        method: 'POST',
        minVersion: 4
    }
];
exports.GeneralCMSAPITypes = [
    {
        type: 'GET_COM_ACCOUNT',
        path: 'general/get_com_account',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'GET_ACCOUNT_RANKS',
        path: 'general/get_account_ranks',
        method: 'POST',
        minVersion: 2,
    },
    {
        type: 'SET_ACCOUNT_RANKS',
        path: 'general/set_account_ranks',
        method: 'POST',
        minVersion: 2,
    },
    {
        type: 'GET_DEPARTMENTS',
        path: 'general/get_departments',
        method: 'POST',
        minVersion: 2,
    },
    {
        type: 'GET_SUB_VERSION',
        path: 'general/get_sub_version',
        method: 'POST',
        minVersion: 0
    },
    {
        type: 'CHECK_COM_APIID',
        path: 'general/check_com_apiid',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'CLOCK_IN_OUT',
        path: 'general/clock_in_out',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'KICK_ACCOUNT',
        path: 'general/kick_account',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'BAN_ACCOUNT',
        path: 'general/ban_account',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'EDIT_ACC_PROFLIE_FIELDS',
        path: 'general/edit_acc_profile_fields',
        method: 'POST',
        minVersion: 0
    }
];
exports.ServersCMSAPITypes = [
    {
        type: 'GET_GAME_SERVERS',
        path: 'servers/get_game_servers',
        method: 'POST',
        minVersion: 2
    },
    {
        type: 'VERIFY_WHITELIST',
        path: 'servers/verify_whitelist',
        method: 'POST',
        minVersion: 3
    },
    {
        type: 'FULL_WHITELIST',
        path: 'servers/full_whitelist',
        method: 'POST',
        minVersion: 3
    }
];
exports.EventsCMSAPITypes = [
    {
        type: 'RSVP',
        path: 'events/rsvp',
        method: 'POST',
        minVersion: 3
    }
];
exports.FormsCMSAPITypes = [
    {
        type: 'CHANGE_FORM_STAGE',
        path: 'forms/change/stage',
        method: 'POST',
        minVersion: 0
    }
];
exports.CommunitiesCMSAPITypes = [
    {
        type: 'LOOKUP',
        path: 'communities/lookup',
        method: 'POST',
        minVersion: 0
    },
];
function formatForAll(array, product) {
    return array.map((val) => {
        return {
            ...val,
            product
        };
    });
}
exports.AllAPITypes = [...formatForAll(exports.GeneralCADAPITypes, constants_1.productEnums.CAD), ...formatForAll(exports.CivilianCADAPITypes, constants_1.productEnums.CAD), ...formatForAll(exports.EmergencyCADAPITypes, constants_1.productEnums.CAD), ...formatForAll(exports.GeneralCMSAPITypes, constants_1.productEnums.CMS), ...formatForAll(exports.ServersCMSAPITypes, constants_1.productEnums.CMS), ...formatForAll(exports.EventsCMSAPITypes, constants_1.productEnums.CMS), ...formatForAll(exports.FormsCMSAPITypes, constants_1.productEnums.CMS), ...formatForAll(exports.CommunitiesCMSAPITypes, constants_1.productEnums.CMS)];
var CADRecordTypeEnums;
(function (CADRecordTypeEnums) {
    CADRecordTypeEnums[CADRecordTypeEnums["Warrant"] = 2] = "Warrant";
    CADRecordTypeEnums[CADRecordTypeEnums["Bolo"] = 3] = "Bolo";
    CADRecordTypeEnums[CADRecordTypeEnums["License"] = 4] = "License";
    CADRecordTypeEnums[CADRecordTypeEnums["VehicleRegistration"] = 5] = "VehicleRegistration";
    CADRecordTypeEnums[CADRecordTypeEnums["Character"] = 7] = "Character";
    CADRecordTypeEnums[CADRecordTypeEnums["PoliceRecord"] = 8] = "PoliceRecord";
    CADRecordTypeEnums[CADRecordTypeEnums["PoliceReport"] = 9] = "PoliceReport";
    CADRecordTypeEnums[CADRecordTypeEnums["MedicalRecord"] = 10] = "MedicalRecord";
    CADRecordTypeEnums[CADRecordTypeEnums["MedicalReport"] = 11] = "MedicalReport";
    CADRecordTypeEnums[CADRecordTypeEnums["FireRecord"] = 12] = "FireRecord";
    CADRecordTypeEnums[CADRecordTypeEnums["FireReport"] = 13] = "FireReport";
    CADRecordTypeEnums[CADRecordTypeEnums["DMVRecord"] = 14] = "DMVRecord";
    CADRecordTypeEnums[CADRecordTypeEnums["LawRecord"] = 15] = "LawRecord";
    CADRecordTypeEnums[CADRecordTypeEnums["LawReport"] = 16] = "LawReport";
})(CADRecordTypeEnums = exports.CADRecordTypeEnums || (exports.CADRecordTypeEnums = {}));
var CADRecordSectionCategoryEnums;
(function (CADRecordSectionCategoryEnums) {
    CADRecordSectionCategoryEnums[CADRecordSectionCategoryEnums["Custom"] = 0] = "Custom";
    CADRecordSectionCategoryEnums[CADRecordSectionCategoryEnums["Flags"] = 1] = "Flags";
    CADRecordSectionCategoryEnums[CADRecordSectionCategoryEnums["Speed"] = 5] = "Speed";
    CADRecordSectionCategoryEnums[CADRecordSectionCategoryEnums["Charges"] = 6] = "Charges";
    CADRecordSectionCategoryEnums[CADRecordSectionCategoryEnums["LinkedRecords"] = 9] = "LinkedRecords";
})(CADRecordSectionCategoryEnums = exports.CADRecordSectionCategoryEnums || (exports.CADRecordSectionCategoryEnums = {}));
var CADLookupByIntSearchTypeEnums;
(function (CADLookupByIntSearchTypeEnums) {
    CADLookupByIntSearchTypeEnums[CADLookupByIntSearchTypeEnums["IDENTIFIER"] = 0] = "IDENTIFIER";
    CADLookupByIntSearchTypeEnums[CADLookupByIntSearchTypeEnums["SUPERVISOR_STATUS"] = 1] = "SUPERVISOR_STATUS";
    CADLookupByIntSearchTypeEnums[CADLookupByIntSearchTypeEnums["ACTIVE_STATUS"] = 2] = "ACTIVE_STATUS";
    CADLookupByIntSearchTypeEnums[CADLookupByIntSearchTypeEnums["NUMBER"] = 3] = "NUMBER";
})(CADLookupByIntSearchTypeEnums = exports.CADLookupByIntSearchTypeEnums || (exports.CADLookupByIntSearchTypeEnums = {}));
var CADModifyIdentifierActionEnums;
(function (CADModifyIdentifierActionEnums) {
    CADModifyIdentifierActionEnums[CADModifyIdentifierActionEnums["ADD"] = 0] = "ADD";
    CADModifyIdentifierActionEnums[CADModifyIdentifierActionEnums["EDIT"] = 1] = "EDIT";
    CADModifyIdentifierActionEnums[CADModifyIdentifierActionEnums["REMOVE"] = 2] = "REMOVE";
})(CADModifyIdentifierActionEnums = exports.CADModifyIdentifierActionEnums || (exports.CADModifyIdentifierActionEnums = {}));
var CADDispatchOriginEnums;
(function (CADDispatchOriginEnums) {
    CADDispatchOriginEnums[CADDispatchOriginEnums["Caller"] = 0] = "Caller";
    CADDispatchOriginEnums[CADDispatchOriginEnums["RadioDispatch"] = 1] = "RadioDispatch";
    CADDispatchOriginEnums[CADDispatchOriginEnums["Observed"] = 2] = "Observed";
    CADDispatchOriginEnums[CADDispatchOriginEnums["WalkUp"] = 3] = "WalkUp";
})(CADDispatchOriginEnums = exports.CADDispatchOriginEnums || (exports.CADDispatchOriginEnums = {}));
var CADDispatchStatusEnums;
(function (CADDispatchStatusEnums) {
    CADDispatchStatusEnums[CADDispatchStatusEnums["Pending"] = 0] = "Pending";
    CADDispatchStatusEnums[CADDispatchStatusEnums["Active"] = 1] = "Active";
    CADDispatchStatusEnums[CADDispatchStatusEnums["Closed"] = 2] = "Closed";
})(CADDispatchStatusEnums = exports.CADDispatchStatusEnums || (exports.CADDispatchStatusEnums = {}));
