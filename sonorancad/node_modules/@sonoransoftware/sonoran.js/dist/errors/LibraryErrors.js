"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.GenericError = void 0;
const messages = new Map();
class GenericError extends Error {
    constructor(key, ...args) {
        super(GenericError.message(key, args));
        this.errCode = key;
        if (Error.captureStackTrace)
            Error.captureStackTrace(this, GenericError);
    }
    get name() {
        return `${super.name} [${this.errCode}]`;
    }
    get code() {
        return this.errCode;
    }
    /**
     * Format the message for an error.
     * @param {string} key Error key
     * @param {Array<any>} args Arguments to pass for util format or as function args
     * @returns {string} Formatted string
     */
    static message(key, args) {
        if (typeof key !== 'string')
            throw new Error('Error message key must be a string');
        const msg = messages.get(key);
        if (!msg)
            throw new Error(`An invalid error message key was used: ${key}.`);
        if (typeof msg === 'function')
            return msg(...args);
        if (!(args === null || args === void 0 ? void 0 : args.length))
            return msg;
        args.unshift(msg);
        return String(...args);
    }
}
exports.GenericError = GenericError;
/**
 * Register an error code and message.
 * @param {string} sym Unique name for the error
 * @param {*} val Value of the error
 */
function register(sym, val) {
    messages.set(sym, typeof val === 'function' ? val : String(val));
}
exports.register = register;
