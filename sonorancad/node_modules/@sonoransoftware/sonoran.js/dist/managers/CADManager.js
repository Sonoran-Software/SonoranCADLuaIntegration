"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CADManager = void 0;
const src_1 = require("../libs/rest/src");
const BaseManager_1 = require("./BaseManager");
const globalTypes = __importStar(require("../constants"));
const CADServerManager_1 = require("./CADServerManager");
/**
 * Manages all Sonoran CAD data and methods to interact with the public API.
 */
class CADManager extends BaseManager_1.BaseManager {
    constructor(instance) {
        super(instance);
        this.ready = false;
        this.version = 0;
        this.failReason = null;
        this.rest = new src_1.REST(instance, this, globalTypes.productEnums.CAD, src_1.DefaultCADRestOptions);
        this.buildManager(instance);
    }
    async buildManager(instance) {
        var _a;
        const mutableThis = this;
        try {
            const versionResp = await ((_a = this.rest) === null || _a === void 0 ? void 0 : _a.request('GET_VERSION'));
            mutableThis.version = Number.parseInt(versionResp.replace(/(^\d+)(.+$)/i, '$1'));
            if (this.version >= globalTypes.CADSubscriptionVersionEnum.STANDARD) {
                this.servers = new CADServerManager_1.CADServerManager(instance, this);
            }
            instance.isCADSuccessful = true;
            instance.emit('CAD_SETUP_SUCCESSFUL');
        }
        catch (err) {
            mutableThis.failReason = err;
            instance.emit('CAD_SETUP_UNSUCCESSFUL', err);
            throw err;
        }
    }
    /**
     * Gets a community account by `accId` or `apiId`.
     * @param {Object} params The object that contains parameters to get a community account.
     * @param {string} [data.accId] The account id to find a community account.
     * @param {string} [data.apiId] The api id to find a community account.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed and the account data object if found.
     */
    async getAccount(params) {
        return new Promise(async (resolve, reject) => {
            var _a;
            try {
                const getAccountRequest = await ((_a = this.rest) === null || _a === void 0 ? void 0 : _a.request('GET_ACCOUNT', params.apiId, params.username));
                resolve({ success: true, data: getAccountRequest });
            }
            catch (err) {
                if (err instanceof src_1.APIError) {
                    resolve({ success: false, reason: err.response });
                }
                else {
                    reject(err);
                }
            }
        });
    }
}
exports.CADManager = CADManager;
