"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CMSManager = void 0;
const src_1 = require("../libs/rest/src");
const BaseManager_1 = require("./BaseManager");
const globalTypes = __importStar(require("../constants"));
const CMSServerManager_1 = require("./CMSServerManager");
/**
 * Manages all Sonoran CMS data and methods to interact with the public API.
 */
class CMSManager extends BaseManager_1.BaseManager {
    constructor(instance) {
        super(instance);
        this.ready = false;
        this.version = 0;
        this.failReason = null;
        this.rest = new src_1.REST(instance, this, globalTypes.productEnums.CMS, src_1.DefaultCMSRestOptions);
        this.buildManager(instance);
    }
    async buildManager(instance) {
        var _a;
        const mutableThis = this;
        try {
            const versionResp = await ((_a = this.rest) === null || _a === void 0 ? void 0 : _a.request('GET_SUB_VERSION'));
            const version = Number.parseInt(versionResp.replace(/(^\d+)(.+$)/i, '$1'));
            if (version >= globalTypes.CMSSubscriptionVersionEnum.STANDARD) {
                this.servers = new CMSServerManager_1.CMSServerManager(instance, this);
            }
            mutableThis.ready = true;
            mutableThis.version = version;
            instance.isCMSSuccessful = true;
            instance.emit('CMS_SETUP_SUCCESSFUL');
        }
        catch (err) {
            mutableThis.failReason = err;
            instance.emit('CMS_SETUP_UNSUCCESSFUL', err);
            throw err;
        }
    }
    /**
     * Verifies the whitelist of a given account with the given parameters to search of said account.
     * @param {Object | string} data The object or [accId | apiId as a string] that contains data to get a community account to verify if it has whitelist to the specified server. *If given as a string it will default to the set or default cms server id (1).
     * @param {string} [data.accId] The account id to find a community account.
     * @param {string} [data.apiId] The api id to find a community account.
     * @param {string} [data.serverId] The username to find a community account.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed and the account data object if found.
     */
    async verifyWhitelist(data) {
        return new Promise(async (resolve, reject) => {
            var _a, _b;
            try {
                const isString = typeof data === 'string';
                const whitelistRequest = await ((_a = this.rest) === null || _a === void 0 ? void 0 : _a.request('VERIFY_WHITELIST', isString ? data : data.apiId, isString ? data : data.accId, isString ? this.instance.cmsDefaultServerId : (_b = data.serverId) !== null && _b !== void 0 ? _b : this.instance.cmsDefaultServerId, isString ? undefined : data.username, isString ? undefined : data.discord, isString ? undefined : data.uniqueId));
                if (typeof whitelistRequest === 'string') {
                    resolve({ success: true, reason: whitelistRequest });
                }
                else {
                    resolve({ success: false, reason: whitelistRequest.message });
                }
            }
            catch (err) {
                if (err instanceof src_1.APIError) {
                    resolve({ success: false, reason: err.response });
                }
                else {
                    reject(err);
                }
            }
        });
    }
    /**
     * Gets a full whitelist allowed list for a specific server.
     * @param {number} serverId (Optional) Server ID to get the whole allow list for, if not specified it will grab the default server ID that is set.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed and the account data object if found.
     */
    async getFullWhitelist(serverId) {
        return new Promise(async (resolve, reject) => {
            var _a;
            try {
                const getFullWhitelistRequest = await ((_a = this.rest) === null || _a === void 0 ? void 0 : _a.request('FULL_WHITELIST', serverId !== null && serverId !== void 0 ? serverId : this.instance.cmsDefaultServerId));
                resolve({ success: true, data: getFullWhitelistRequest });
            }
            catch (err) {
                if (err instanceof src_1.APIError) {
                    resolve({ success: false, reason: err.response });
                }
                else {
                    reject(err);
                }
            }
        });
    }
    /**
     * Gets a community account by `accId`, `apiId`, or `username`.
     * @param {Object} params The object that contains parameters to get a community account.
     * @param {string} [data.accId] The account id to find a community account.
     * @param {string} [data.apiId] The api id to find a community account.
     * @param {string} [data.username] The username to find a community account.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed and the account data object if found.
     */
    async getComAccount(params) {
        return new Promise(async (resolve, reject) => {
            var _a;
            try {
                const getAccountRequest = await ((_a = this.rest) === null || _a === void 0 ? void 0 : _a.request('GET_COM_ACCOUNT', params.apiId, params.username, params.accId, params.discord, params.uniqueId));
                resolve({ success: true, data: getAccountRequest });
            }
            catch (err) {
                if (err instanceof src_1.APIError) {
                    resolve({ success: false, reason: err.response });
                }
                else {
                    reject(err);
                }
            }
        });
    }
    /**
     * Gets a community account by `accId`, `apiId`, or `username`.
     * @param {Object} params The object that contains parameters to get a community account.
     * @param {string} [data.accId] (Optional) The account id to find a community account.
     * @param {string} [data.apiId] (Optional) The api id to find a community account.
     * @param {string} [data.username] (Optional) The username to find a community account.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed and the account data object if found.
     */
    async getAccountRanks(params) {
        return new Promise(async (resolve, reject) => {
            var _a;
            try {
                const getAccountRanksRequest = await ((_a = this.rest) === null || _a === void 0 ? void 0 : _a.request('GET_ACCOUNT_RANKS', params.apiId, params.username, params.accId, params.discord, params.uniqueId));
                resolve({ success: true, data: getAccountRanksRequest });
            }
            catch (err) {
                if (err instanceof src_1.APIError) {
                    resolve({ success: false, reason: err.response });
                }
                else {
                    reject(err);
                }
            }
        });
    }
    /**
     * Clocks in or out an account by `accId` or `apiId`.
     * @param {Object} data The object that contains critical data to clock in or out an account.
     * @param {string} [data.accId] (Optional) The account id to clock in or out.
     * @param {string} [data.apiId] (Optional) The api id to clock in or out.
     * @param {boolean} [data.forceClockIn] If true, it will override any current clock in with a new clock in at the time of the request.
     * @param {string} [data.discord] (Optional) The discord ID to clock in or out.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed.
     */
    async clockInOut(data) {
        return new Promise(async (resolve, reject) => {
            var _a;
            try {
                const clockInOutRequest = await ((_a = this.rest) === null || _a === void 0 ? void 0 : _a.request('CLOCK_IN_OUT', data.apiId, data.accId, !!data.forceClockIn, data.discord, data.uniqueId));
                const clockInOutResponse = clockInOutRequest;
                if (!clockInOutResponse)
                    resolve({ success: false, reason: clockInOutRequest });
                resolve({ success: true, clockedIn: clockInOutResponse.completed });
            }
            catch (err) {
                if (err instanceof src_1.APIError) {
                    resolve({ success: false, reason: err.response });
                }
                else {
                    reject(err);
                }
            }
        });
    }
    /**
     * Check if a given [apiId] is attached to any account within the community CMS.
     * @param {string} apiId The api id to check for an account.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed.
     */
    async checkComApiId(apiId) {
        return new Promise(async (resolve, reject) => {
            var _a;
            try {
                const checkComApiIdRequest = await ((_a = this.rest) === null || _a === void 0 ? void 0 : _a.request('CHECK_COM_APIID', apiId));
                resolve({ success: true, username: checkComApiIdRequest });
            }
            catch (err) {
                if (err instanceof src_1.APIError) {
                    resolve({ success: false, reason: err.response });
                }
                else {
                    reject(err);
                }
            }
        });
    }
    /**
     * Gets all department information within the community CMS.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed.
     */
    async getDepartments() {
        return new Promise(async (resolve, reject) => {
            var _a;
            try {
                const getDepartmentsRequest = await ((_a = this.rest) === null || _a === void 0 ? void 0 : _a.request('GET_DEPARTMENTS'));
                resolve({ success: true, data: getDepartmentsRequest });
            }
            catch (err) {
                if (err instanceof src_1.APIError) {
                    resolve({ success: false, reason: err.response });
                }
                else {
                    reject(err);
                }
            }
        });
    }
    /**
     * Sets a community account's ranks for the CMS community.
     * @param {string} accId The object that contains critical data to clock in or out an account.
     * @param {Object} changes The object that contains change data for setting account ranks.
     * @param {Object} [changes.set] (Optional) The object that contains primary and secondary data for setting account ranks.
     * @param {string} [changes.set.primary] (Optional) The primary rank ID wanting to set to the account.
     * @param {string} [changes.set.secondary] (Optional) The secondary rank ID(s) wanting to set to the account.
     * @param {Array} [changes.add] (Optional) The secondary rank IDs wanting to add to the account.
     * @param {Array} [changes.remove] (Optional) The secondary rank IDs wanting to remove to the account.
     * @param {string} [discord] (Optional) The discord ID to set the ranks for.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed.
     */
    async setAccountRanks(changes, apiId, accId, username, discord, uniqueId) {
        return new Promise(async (resolve, reject) => {
            var _a;
            try {
                const setAccountRanksRequest = await ((_a = this.rest) === null || _a === void 0 ? void 0 : _a.request('SET_ACCOUNT_RANKS', accId, changes.set, changes.add, changes.remove, apiId, username, discord, uniqueId));
                resolve({ success: true, data: setAccountRanksRequest });
            }
            catch (err) {
                if (err instanceof src_1.APIError) {
                    resolve({ success: false, reason: err.response });
                }
                else {
                    reject(err);
                }
            }
        });
    }
}
exports.CMSManager = CMSManager;
