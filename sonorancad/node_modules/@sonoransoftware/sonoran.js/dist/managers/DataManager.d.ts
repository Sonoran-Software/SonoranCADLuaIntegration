import { Instance } from '../instance/Instance';
import { BaseManager } from './BaseManager';
import { Constructable } from '../constants';
import { Collection } from '@discordjs/collection';
interface DataManagerInstanceObject {
    id: string;
}
export declare class DataManager<_K, Holds, _R> extends BaseManager {
    holds: Constructable<Holds>;
    constructor(instance: Instance, holds: any);
    /**
     * The cache of items for this manager.
     * @type {Collection}
     * @abstract
     */
    get cache(): Collection<any, any>;
    /**
     * Resolves a data entry to a data Object.
     * @param idOrInstance The id or instance of something in this Manager
     * @returns {?Object} An instance from this Manager
     */
    resolve(idOrInstance: string | object): object | null;
    /**
     * Resolves a data entry to an instance id.
     * @param {string|Object} idOrInstance The id or instance of something in this Manager
     * @returns {?Snowflake}
     */
    resolveId(idOrInstance: string | DataManagerInstanceObject): string | null;
    valueOf(): Collection<any, any>;
}
export {};
