import { Instance } from '../instance/Instance';
import { CMSSubscriptionVersionEnum } from '../constants';
import { REST } from '../libs/rest/src';
import { BaseManager } from './BaseManager';
import * as globalTypes from '../constants';
import { CMSServerManager } from './CMSServerManager';
/**
 * Manages all Sonoran CMS data and methods to interact with the public API.
 */
export declare class CMSManager extends BaseManager {
    readonly ready: boolean;
    readonly version: CMSSubscriptionVersionEnum;
    readonly failReason: unknown;
    rest: REST | undefined;
    servers: CMSServerManager | undefined;
    constructor(instance: Instance);
    protected buildManager(instance: Instance): Promise<void>;
    /**
     * Verifies the whitelist of a given account with the given parameters to search of said account.
     * @param {Object | string} data The object or [accId | apiId as a string] that contains data to get a community account to verify if it has whitelist to the specified server. *If given as a string it will default to the set or default cms server id (1).
     * @param {string} [data.accId] The account id to find a community account.
     * @param {string} [data.apiId] The api id to find a community account.
     * @param {string} [data.serverId] The username to find a community account.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed and the account data object if found.
     */
    verifyWhitelist(data: {
        accId?: string;
        apiId?: string;
        username?: string;
        discord?: string;
        uniqueId?: number;
        serverId?: number;
    } | string): Promise<globalTypes.CMSVerifyWhitelistPromiseResult>;
    /**
     * Gets a full whitelist allowed list for a specific server.
     * @param {number} serverId (Optional) Server ID to get the whole allow list for, if not specified it will grab the default server ID that is set.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed and the account data object if found.
     */
    getFullWhitelist(serverId?: number): Promise<globalTypes.CMSGetFullWhitelistPromiseResult>;
    /**
     * Gets a community account by `accId`, `apiId`, or `username`.
     * @param {Object} params The object that contains parameters to get a community account.
     * @param {string} [data.accId] The account id to find a community account.
     * @param {string} [data.apiId] The api id to find a community account.
     * @param {string} [data.username] The username to find a community account.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed and the account data object if found.
     */
    getComAccount(params: {
        accId?: string;
        apiId?: string;
        username?: string;
        discord?: string;
        uniqueId?: string;
    }): Promise<globalTypes.CMSGetComAccountPromiseResult>;
    /**
     * Gets a community account by `accId`, `apiId`, or `username`.
     * @param {Object} params The object that contains parameters to get a community account.
     * @param {string} [data.accId] (Optional) The account id to find a community account.
     * @param {string} [data.apiId] (Optional) The api id to find a community account.
     * @param {string} [data.username] (Optional) The username to find a community account.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed and the account data object if found.
     */
    getAccountRanks(params: {
        accId?: string;
        apiId?: string;
        username?: string;
        discord?: string;
        uniqueId?: string;
    }): Promise<globalTypes.CMSGetAccountRanksPromiseResult>;
    /**
     * Clocks in or out an account by `accId` or `apiId`.
     * @param {Object} data The object that contains critical data to clock in or out an account.
     * @param {string} [data.accId] (Optional) The account id to clock in or out.
     * @param {string} [data.apiId] (Optional) The api id to clock in or out.
     * @param {boolean} [data.forceClockIn] If true, it will override any current clock in with a new clock in at the time of the request.
     * @param {string} [data.discord] (Optional) The discord ID to clock in or out.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed.
     */
    clockInOut(data: {
        accId?: string;
        apiId?: string;
        forceClockIn?: boolean;
        discord?: string;
        uniqueId?: string;
    }): Promise<globalTypes.CMSClockInOutPromiseResult>;
    /**
     * Check if a given [apiId] is attached to any account within the community CMS.
     * @param {string} apiId The api id to check for an account.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed.
     */
    checkComApiId(apiId: string): Promise<globalTypes.CMSCheckComApiIdPromiseResult>;
    /**
     * Gets all department information within the community CMS.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed.
     */
    getDepartments(): Promise<globalTypes.CMSGetDepartmentsPromiseResult>;
    /**
     * Sets a community account's ranks for the CMS community.
     * @param {string} accId The object that contains critical data to clock in or out an account.
     * @param {Object} changes The object that contains change data for setting account ranks.
     * @param {Object} [changes.set] (Optional) The object that contains primary and secondary data for setting account ranks.
     * @param {string} [changes.set.primary] (Optional) The primary rank ID wanting to set to the account.
     * @param {string} [changes.set.secondary] (Optional) The secondary rank ID(s) wanting to set to the account.
     * @param {Array} [changes.add] (Optional) The secondary rank IDs wanting to add to the account.
     * @param {Array} [changes.remove] (Optional) The secondary rank IDs wanting to remove to the account.
     * @param {string} [discord] (Optional) The discord ID to set the ranks for.
     * @returns {Promise} Promise object represents if the request was successful with reason for failure if needed.
     */
    setAccountRanks(changes: globalTypes.CMSSetAccountRanksChangesObject, apiId?: string, accId?: string, username?: string, discord?: string, uniqueId?: string): Promise<globalTypes.CMSSetAccountRanksPromiseResult>;
}
