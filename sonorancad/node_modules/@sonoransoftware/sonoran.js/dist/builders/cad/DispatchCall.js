"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DispatchCallBuilder = void 0;
/**
 * Represents a constructed dispatch call for API requests
 */
class DispatchCallBuilder {
    /**
     * Dispatch Call Builder used for API calls with Sonoran CAD to create a new dispatch call.
     * @param data Data Options (CADNewDispatchBuilderOptions) used to build the new dispatch call
     */
    constructor(data = {}) {
        this.data = { ...data };
    }
    /**
       * Sets the origin for this dispatch call
     * @param origin Origin enum used for this dispatch call for information purposes
       */
    setOrigin(origin) {
        this.data.origin = origin;
        return this;
    }
    /**
       * Sets the status for this dispatch call
     * @param status Status enum used for the dispatch call for information purposes
       */
    setStatus(status) {
        this.data.status = status;
        return this;
    }
    /**
       * Sets the priority level for this dispatch call
     * @param priority Priority level used for the dispatch call for information purposes
       */
    setPriority(priority) {
        this.data.priority = priority;
        return this;
    }
    /**
       * Sets the block for this dispatch call
     * @param block Block used for the dispatch call for information purposes
       */
    setBlock(block) {
        this.data.block = block;
        return this;
    }
    /**
       * Sets the address for this dispatch call
     * @param address Address used for the dispatch call for information purposes
       */
    setAddress(address) {
        this.data.address = address;
        return this;
    }
    /**
       * Sets the postal for this dispatch call
     * @param postal Postal used for the dispatch call for information purposes
       */
    setPostal(postal) {
        this.data.postal = postal;
        return this;
    }
    /**
       * Sets the title for this dispatch call
     * @param title Title used for the dispatch call for information purposes
       */
    setTitle(title) {
        this.data.title = title;
        return this;
    }
    /**
       * Sets the code for this dispatch call
     * @param code Code used for the dispatch call for information purposes
       */
    setCode(code) {
        this.data.code = code;
        return this;
    }
    /**
       * Sets the primary tracking preference for this dispatch call
     * @param primaryUnit Primary unit identifier
       */
    setPrimary(primaryUnit) {
        this.data.primary = primaryUnit;
        return this;
    }
    /**
       * Sets the track primary preference for this dispatch call
     * @param preference Preference for tracking primary
       */
    setTrackPrimaryPreference(preference) {
        this.data.trackPrimary = preference;
        return this;
    }
    /**
       * Sets the description for this dispatch call
     * @param description Description for a dispatch call
       */
    setDescription(description) {
        this.data.description = description;
        return this;
    }
    /**
       * Sets metadata for this dispatch call that can be used later on
     * @param metaData Dictionary of metadata to store with a dispatch call, can be used later on
       */
    setMetadata(metaData) {
        this.data.metaData = metaData;
        return this;
    }
    /**
       * Sets specified units for this dispatch call
     * @param units Units to be removed from a call
       */
    setUnits(units) {
        this.data.units = units;
        return this;
    }
    /**
       * Adds specified units from this dispatch call
     * @param units Units to be removed from a call
       */
    addUnits(...units) {
        var _a;
        (_a = this.data.units) === null || _a === void 0 ? void 0 : _a.push(...units);
        return this;
    }
    /**
       * Removes specified units from this dispatch call
     * @param units Units to be removed from a call
       */
    removeUnits(...units) {
        var _a;
        (_a = this.data.units) === null || _a === void 0 ? void 0 : _a.filter((unit) => !units.includes(unit));
        return this;
    }
    /**
       * Transforms the dispatch call to a plain object
       */
    toJSON() {
        return { ...this.data };
    }
}
exports.DispatchCallBuilder = DispatchCallBuilder;
