"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = void 0;
const events_1 = __importDefault(require("events"));
const globalTypes = __importStar(require("../constants"));
const CADManager_1 = require("../managers/CADManager");
const CMSManager_1 = require("../managers/CMSManager");
const utils_1 = require("../utils");
class Instance extends events_1.default {
    constructor(options) {
        super({ captureRejections: true });
        this.cadApiUrl = 'https://api.sonorancad.com';
        this.cadDefaultServerId = 1;
        this.isCADSuccessful = false;
        this.cmsApiUrl = 'https://api.sonorancms.com';
        this.cmsDefaultServerId = 1;
        this.isCMSSuccessful = false;
        this.debug = false;
        this.apiHeaders = {};
        if (options.debug) {
            this.debug = options.debug;
        }
        if (Object.prototype.hasOwnProperty.call(options, 'apiHeaders') && options.apiHeaders !== undefined) {
            this.apiHeaders = options.apiHeaders;
        }
        if (Object.prototype.hasOwnProperty.call(options, 'apiKey') && Object.prototype.hasOwnProperty.call(options, 'communityId')) {
            if (Object.prototype.hasOwnProperty.call(options, 'product')) {
                switch (options.product) {
                    case globalTypes.productEnums.CAD: {
                        this.cadCommunityId = options.communityId;
                        this.cadApiKey = options.apiKey;
                        if (options.serverId !== undefined) {
                            this._debugLog(`Overriding default server id... ${options.serverId}`);
                            this.cadDefaultServerId = options.serverId;
                        }
                        if (Object.prototype.hasOwnProperty.call(options, 'cadApiUrl') && typeof options.cadApiUrl === 'string') {
                            this._debugLog(`Overriding CAD API Url... ${options.cadApiUrl}`);
                            this.cadApiUrl = options.cadApiUrl;
                        }
                        this._debugLog('About to initialize instance.');
                        this.initialize();
                        break;
                    }
                    case globalTypes.productEnums.CMS: {
                        this.cmsCommunityId = options.communityId;
                        this.cmsApiKey = options.apiKey;
                        if (options.serverId !== undefined) {
                            this._debugLog(`Overriding default server id... ${options.serverId}`);
                            this.cmsDefaultServerId = options.serverId;
                        }
                        if (Object.prototype.hasOwnProperty.call(options, 'cmsApiUrl') && typeof options.cmsApiUrl === 'string') {
                            this._debugLog(`Overriding CMS API URL... ${options.cmsApiUrl}`);
                            this.cmsApiUrl = options.cmsApiUrl;
                        }
                        this.initialize();
                        break;
                    }
                    default: {
                        throw new Error('Invalid product enum given for constructor.');
                    }
                }
            }
            else {
                throw new Error('No product enum given when instancing.');
            }
        }
        else {
            this.cadCommunityId = options.cadCommunityId;
            this.cadApiKey = options.cadApiKey;
            this.cmsCommunityId = options.cmsCommunityId;
            this.cmsApiKey = options.cmsApiKey;
            if (options.cadDefaultServerId !== undefined) {
                this._debugLog(`Overriding default CAD server id... ${options.serverId}`);
                this.cadDefaultServerId = options.cadDefaultServerId;
            }
            if (options.cmsDefaultServerId !== undefined) {
                this._debugLog(`Overriding default CMS server id... ${options.serverId}`);
                this.cmsDefaultServerId = options.cmsDefaultServerId;
            }
            if (Object.prototype.hasOwnProperty.call(options, 'cadApiUrl') && typeof options.cadApiUrl === 'string') {
                this._debugLog(`Overriding CAD API Url... ${options.cadApiUrl}`);
                this.cadApiUrl = options.cadApiUrl;
            }
            if (Object.prototype.hasOwnProperty.call(options, 'cmsApiUrl') && typeof options.cmsApiUrl === 'string') {
                this._debugLog(`Overriding CMS API URL... ${options.cmsApiUrl}`);
                this.cmsApiUrl = options.cmsApiUrl;
            }
            this.initialize();
        }
    }
    initialize() {
        if (this.cadCommunityId && this.cadApiKey && this.cadApiUrl) {
            this._debugLog('About to initialize CAD Manager');
            this.cad = new CADManager_1.CADManager(this);
        }
        else {
            this._debugLog('Not initializing CAD Manager due to a missing community id, api key, or api url.');
        }
        if (this.cmsCommunityId && this.cmsApiKey && this.cmsApiUrl) {
            this._debugLog('About to initialize CMS Manager');
            this.cms = new CMSManager_1.CMSManager(this);
        }
        else {
            this._debugLog('Not initializing CMS Manager due to a missing community id, api key, or api url.');
        }
    }
    _debugLog(message) {
        if (this.debug) {
            (0, utils_1.debugLog)(message);
        }
    }
}
exports.Instance = Instance;
