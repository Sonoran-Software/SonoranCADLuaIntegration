"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugLog = exports.errorLog = exports.infoLog = exports.warnLog = exports.flatten = exports.cloneObject = exports.mergeDefault = void 0;
const collection_1 = require("@discordjs/collection");
const isObject = (d) => typeof d === 'object' && d !== null;
function mergeDefault(def, given) {
    if (!given)
        return def;
    for (const key in def) {
        if (!Object.prototype.hasOwnProperty.call(given, key) || given[key] === undefined) {
            given[key] = def[key];
        }
        else if (given[key] === Object(given[key])) {
            given[key] = mergeDefault(def[key], given[key]);
        }
    }
    return given;
}
exports.mergeDefault = mergeDefault;
/**
 * Shallow-copies an object with its class/prototype intact.
 * @param {Object} obj Object to clone
 * @returns {Object}
 * @private
 */
function cloneObject(obj) {
    return Object.assign(Object.create(obj), obj);
}
exports.cloneObject = cloneObject;
function flatten(obj, ...props) {
    if (!isObject(obj))
        return obj;
    const objProps = Object.keys(obj)
        .filter((k) => !k.startsWith('_'))
        .map((k) => ({ [k]: true }));
    props = objProps.length ? Object.assign([...objProps], ...props) : Object.assign({}, ...props); // eslint-disable-line
    const out = {};
    for (let [prop, newProp] of Object.entries(props)) {
        if (!newProp)
            continue;
        newProp = newProp === true ? prop : newProp;
        const element = obj[prop];
        const elemIsObj = isObject(element);
        const valueOf = elemIsObj && typeof element.valueOf === 'function' ? element.valueOf() : null;
        // If it's a Collection, make the array of keys
        if (element instanceof collection_1.Collection)
            out[newProp] = Array.from(element.keys());
        // If the valueOf is a Collection, use its array of keys
        else if (valueOf instanceof collection_1.Collection)
            out[newProp] = Array.from(valueOf.keys());
        // If it's an array, flatten each element
        else if (Array.isArray(element))
            out[newProp] = element.map(e => flatten(e));
        // If it's an object with a primitive `valueOf`, use that value
        else if (typeof valueOf !== 'object')
            out[newProp] = valueOf;
        // If it's a primitive
        else if (!elemIsObj)
            out[newProp] = element;
    }
    return out;
}
exports.flatten = flatten;
function warnLog(message) {
    return console.log(`[Sonoran.js - DEBUG] ${message}`);
}
exports.warnLog = warnLog;
function infoLog(message) {
    return console.log(`[Sonoran.js - INFO] ${message}`);
}
exports.infoLog = infoLog;
function errorLog(message) {
    return console.log(`[Sonoran.js - ERROR] ${message}`);
}
exports.errorLog = errorLog;
function debugLog(message) {
    return console.log(`[Sonoran.js - DEBUG] ${message}`);
}
exports.debugLog = debugLog;
